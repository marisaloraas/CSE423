CSE 423 HW5 test run output for hw5
------------------------------------------------------------
	.zip Compiles w/no warnings:         _1/1
	Exe named j0 Runs on Basic Stuff:    _2/2
	Valgrind OK:                         _2/2
	Typecheck Operators:                 _2/4 incorrect message
	Typecheck Functions+parameters:      _4/4
	Typecheck classes:                   _3/4 should be semantic err w/
	Typecheck j0 stuff:                  _3/3     better message
	-----------------------------------------
	Total:                               17/20

	----------------------------------------------------

	(make)
bison -d j0gram.y
j0gram.y: warning: 7 shift/reduce conflicts [-Wconflicts-sr]
gcc -c j0gram.tab.c
flex j0lex.l
gcc -c lex.yy.c
gcc -g -c parse.c
gcc -c symt.c
gcc -c type.c
gcc -g -c main.c type.h tree.h symt.h
gcc -g -Wall j0gram.tab.o lex.yy.o parse.o symt.o type.o main.o -o j0
	(make done rv=0)

------------------------------------------------------------------------

Executing from: /fserv/home/jeffery/submit/423/hw5/hw5
	Test#1 Input:
public class basic {
public static int x ;
public static void main(String []argv) {
   x = 5;
   x = x * x;
}
}

	Test Output:[expect no error]
Sucessful Program 
	(testrun done rv=0)
==16128== Memcheck, a memory error detector
==16128== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==16128== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==16128== Command: ./j0 ../basic.java
==16128== 
Sucessful Program 
==16128== 
==16128== HEAP SUMMARY:
==16128==     in use at exit: 56,296 bytes in 66 blocks
==16128==   total heap usage: 277 allocs, 211 frees, 180,212 bytes allocated
==16128== 
==16128== LEAK SUMMARY:
==16128==    definitely lost: 33,632 bytes in 48 blocks
==16128==    indirectly lost: 22,664 bytes in 18 blocks
==16128==      possibly lost: 0 bytes in 0 blocks
==16128==    still reachable: 0 bytes in 0 blocks
==16128==         suppressed: 0 bytes in 0 blocks
==16128== Rerun with --leak-check=full to see details of leaked memory
==16128== 
==16128== For counts of detected and suppressed errors, rerun with: -v
==16128== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
exit status: 0 expected 0

------------------------------------------------------------------------

Executing from: /fserv/home/jeffery/submit/423/hw5/hw5
	Test#2 Input:
public class typeck {
public static int fib(int i) {
   return 11;
}

public static void main(String [] argv) {
   int i;
   i = 0 + fib;
   return 0;
}
}

	Test Output:[expect type error to + on line 8]
Variable not declared error for fib at line 8 ../typeck.java:8: Variable not declared error fib
	(testrun done rv=0)

------------------------------------------------------------------------

Executing from: /fserv/home/jeffery/submit/423/hw5/hw5
	Test#3 Input:
public class typeck_fn {
public static int fib(int i) {
   return 11;
}

public static int main(String [] argv) {
   int i ;
   i = 0 +
      fib(1,2);
   return 0;
}
}

	Test Output:[expect wrong # of params on line 9]
Icompatiable method call with fib at line 9 ../typeck_fn.java:9: Icompatiable method call error fib
	(testrun done rv=0)

------------------------------------------------------------------------

Executing from: /fserv/home/jeffery/submit/423/hw5/hw5
	Test#4 Input:
public class typeck_struct {
  public double dd;

public static typeck_struct mkFoo() {
  typeck_struct s;
  s = new typeck_struct();
  s.dd = 5.5;
  return s;
}

public static double fib(typeck_struct f, int i) {
   double x;
   x = f.dd * 2.0;
   return x;
}

public static void main(String [] argv) {
   typeck_struct f;
   double i;
   int j;
   i = 0.0 + fib(f, 3);
   i = 5.0;
   i = fib(f, "hello");
   j = 5;
   System.out.println("%d\n", j);
}
}

	Test Output:[expect type error to param on line 23]
../typeck_struct.java:2: syntax error before 'double' token
	(testrun done rv=0)

------------------------------------------------------------------------

Executing from: /fserv/home/jeffery/submit/423/hw5/hw5
	Test#4 Input:
public class jstuff {

public static void main(String [] argv) {
  String m;
  m = "h";
  m = m + "3";
  m = m + "l";
  m = m + "l";
  m = m + "o";
  m = m + "\0";
  System.out.println("" + m);
}
}

	Test Output:[j0.1=bad escape, j0.2=no error]
String "\0" cannot be converted at line 10 ../jstuff.java:10: Incorrect type error
	(testrun done rv=0)

