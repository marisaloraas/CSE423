------------------------------------------------------------

CSE 423 HW2 grade sheet for loraasmarisa_7041_1022752_HW2_loraas
------------------------------------------------------------
	HW2 is a .zip, unpacks in current dir: _1_/1
	compiles -Wall, links w/out warnings:  _2_/2
	builds executable named j0:            _1_/1
	linked list:                           _2_/3
		allocate token structure inside yylex()
	valgrind OK:                           _0_/2
	output looks OK:                       _3_/3
	lexical attributes:                    _2_/2
	handles escapes:                       _0_/2
	handles lexical errors:                _2_/2 message is poor
	autoappends .java extension:           _1_/1
		yeah, but memory management error
	handles Java-not-j0 errors:            _1_/1
	---------------------------------------------
	Total:                                 15_/20


CSE 423 HW2 testrun output for loraasmarisa_7041_1022752_HW2_loraas
------------------------------------------------------------
	(unpacking)
	(unpacking done rv=0)


gcc -g -Wall -c main.c
gcc -g -Wall -c HW2.c
flex j0lex.l
gcc -g -Wall -c lex.yy.c
gcc -g -Wall main.o HW2.o lex.yy.o -o j0


...test0.java [expect lexical error on line 3]...
Test input:
public class test0 { int main() {
  "lexical error...
} }
Test output:
unrecognized characterCategory 		 Text 		 Lineno 		 Filename		 Ival/Sval		

258			public			1		test0.java		
269			class			1		test0.java		
267			test0			1		test0.java		
313			{			1		test0.java		
263			int			1		test0.java		
267			main			1		test0.java		
309			(			1		test0.java		
308			)			1		test0.java		
313			{			1		test0.java		
267			lexical			2		test0.java		
267			error			2		test0.java		
326			.			2		test0.java		
326			.			2		test0.java		
326			.			2		test0.java		
312			}			3		test0.java		
312			}			3		test0.java		
exit status: 0 expected 1
...test1.java [expect normal token output]...
Test input:
public class test1 {
public static void main() {
   System.out.println("Hello\tworld\n");
} }
Test output:
Category 		 Text 		 Lineno 		 Filename		 Ival/Sval		

258			public			1		test1.java		
269			class			1		test1.java		
267			test1			1		test1.java		
313			{			1		test1.java		
258			public			2		test1.java		
270			static			2		test1.java		
265			void			2		test1.java		
267			main			2		test1.java		
309			(			2		test1.java		
308			)			2		test1.java		
313			{			2		test1.java		
267			System			3		test1.java		
326			.			3		test1.java		
267			out			3		test1.java		
326			.			3		test1.java		
267			println			3		test1.java		
309			(			3		test1.java		
277			"Hello\tworld\n"			3		test1.java		"Hello\tworld\n"
308			)			3		test1.java		
314			;			3		test1.java		
312			}			4		test1.java		
312			}			4		test1.java		
exit status: 0 expected 0
...rerun test1.java under valgrind...
==30670== Memcheck, a memory error detector
==30670== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==30670== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==30670== Command: ./j0 test1.java
==30670== 
==30670== Invalid write of size 1
==30670==    at 0x4C34E0D: strcpy (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30670==    by 0x10900E: main (main.c:52)
==30670==  Address 0x5235586 is 0 bytes after a block of size 6 alloc'd
==30670==    at 0x4C31B0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30670==    by 0x108FE9: main (main.c:51)
==30670== 
==30670== Conditional jump or move depends on uninitialised value(s)
==30670==    at 0x1091ED: addnewtoken (HW2.c:44)
==30670==    by 0x109021: main (main.c:53)
==30670== 
==30670== Invalid write of size 1
==30670==    at 0x4C34E0D: strcpy (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30670==    by 0x108FC8: main (main.c:46)
==30670==  Address 0x5236e00 is 0 bytes after a block of size 16 alloc'd
==30670==    at 0x4C31B0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30670==    by 0x108FA3: main (main.c:45)
==30670== 
==30670== Invalid read of size 1
==30670==    at 0x4C34D44: __strlen_sse2 (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30670==    by 0x4E9B5D2: vfprintf (vfprintf.c:1643)
==30670==    by 0x4EA3015: printf (printf.c:33)
==30670==    by 0x109285: print (HW2.c:56)
==30670==    by 0x10903F: main (main.c:55)
==30670==  Address 0x5235586 is 0 bytes after a block of size 6 alloc'd
==30670==    at 0x4C31B0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30670==    by 0x108FE9: main (main.c:51)
==30670== 
==30670== Invalid read of size 1
==30670==    at 0x4C34D44: __strlen_sse2 (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30670==    by 0x4E9B5D2: vfprintf (vfprintf.c:1643)
==30670==    by 0x4EA3015: printf (printf.c:33)
==30670==    by 0x1092C1: print (HW2.c:58)
==30670==    by 0x10903F: main (main.c:55)
==30670==  Address 0x523553a is 0 bytes after a block of size 10 alloc'd
==30670==    at 0x4C31B0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30670==    by 0x108F02: main (main.c:33)
==30670== 
==30670== Invalid read of size 1
==30670==    at 0x4C34D44: __strlen_sse2 (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30670==    by 0x4EBEAB1: puts (ioputs.c:35)
==30670==    by 0x109338: print (HW2.c:67)
==30670==    by 0x10903F: main (main.c:55)
==30670==  Address 0x5236e50 is 0 bytes after a block of size 16 alloc'd
==30670==    at 0x4C31B0F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==30670==    by 0x108FE9: main (main.c:51)
==30670== 
==30670== Conditional jump or move depends on uninitialised value(s)
==30670==    at 0x109357: print (HW2.c:54)
==30670==    by 0x10903F: main (main.c:55)
==30670== 
==30670== Conditional jump or move depends on uninitialised value(s)
==30670==    at 0x1091AB: freelist (HW2.c:27)
==30670==    by 0x109066: main (main.c:58)
==30670== 
Category 		 Text 		 Lineno 		 Filename		 Ival/Sval		

258			public			1		test1.java		
269			class			1		test1.java		
267			test1			1		test1.java		
313			{			1		test1.java		
258			public			2		test1.java		
270			static			2		test1.java		
265			void			2		test1.java		
267			main			2		test1.java		
309			(			2		test1.java		
308			)			2		test1.java		
313			{			2		test1.java		
267			System			3		test1.java		
326			.			3		test1.java		
267			out			3		test1.java		
326			.			3		test1.java		
267			println			3		test1.java		
309			(			3		test1.java		
277			"Hello\tworld\n"			3		test1.java		"Hello\tworld\n"
308			)			3		test1.java		
314			;			3		test1.java		
312			}			4		test1.java		
312			}			4		test1.java		
==30670== 
==30670== HEAP SUMMARY:
==30670==     in use at exit: 0 bytes in 0 blocks
==30670==   total heap usage: 97 allocs, 97 frees, 35,321 bytes allocated
==30670== 
==30670== All heap blocks were freed -- no leaks are possible
==30670== 
==30670== For counts of detected and suppressed errors, rerun with: -v
==30670== Use --track-origins=yes to see where uninitialised values come from
==30670== ERROR SUMMARY: 92 errors from 8 contexts (suppressed: 0 from 0)
exit status: 0 expected 0
...test2.java ...
Test input:
public class test2 { int f() {
   int thread_local = 5;
   return thread_local;
} }
Test output:
unrecognized characterunrecognized characterCategory 		 Text 		 Lineno 		 Filename		 Ival/Sval		

258			public			1		test2.java		
269			class			1		test2.java		
267			test2			1		test2.java		
313			{			1		test2.java		
263			int			1		test2.java		
267			f			1		test2.java		
309			(			1		test2.java		
308			)			1		test2.java		
313			{			1		test2.java		
263			int			2		test2.java		
267			thread			2		test2.java		
267			local			2		test2.java		
324			=			2		test2.java		
275			5			2		test2.java		    5
314			;			2		test2.java		
264			return			3		test2.java		
267			thread			3		test2.java		
267			local			3		test2.java		
314			;			3		test2.java		
312			}			4		test2.java		
312			}			4		test2.java		
exit status: 0 expected 2
...multi-file test...
Test input: a.java
int x;
Test input: b.java
int foo() { return 0; }
Test output:
Category 		 Text 		 Lineno 		 Filename		 Ival/Sval		

263			int			1		a.java		
267			x			1		a.java		
314			;			1		a.java		
exit status: 0 expected 2
...odds and ends test...
Test input:
public class test3 {
// This is a longer test. It would not pass semantic checks yet. //
public      int y;

void main() {
  double d;
  int x, y;
  int L [] = new int[5];
  int T;
  String s;
  C c;
  x = 3 * 6;
  c = null;
  while (x < 18) {
     if (x == 9) {
     break;
     } else if (x <= 5) {
     break;
     } else if (x >= 15) {
     break;
     } else {
     x += 1;
     }
     }
  for (x=0; x < 3; x+=1) { x = x + 5; }
  for (x=3; x > 0; x-=1) { x = x - 2; }
  L[1] = 5 * 5 / x % 5;
  L[1] = x;
  if (x<=y && y>=0 || y!=-1) { System.out.println("hello\n"); }
  return;
} }
Test output:
Category 		 Text 		 Lineno 		 Filename		 Ival/Sval		

258			public			1		test3		
269			class			1		test3		
267			test3			1		test3		
313			{			1		test3		
258			public			2		test3		
263			int			2		test3		
267			y			2		test3		
314			;			2		test3		
265			void			4		test3		
267			main			4		test3		
309			(			4		test3		
308			)			4		test3		
313			{			4		test3		
259			double			5		test3		
267			d			5		test3		
314			;			5		test3		
263			int			6		test3		
267			x			6		test3		
325			,			6		test3		
267			y			6		test3		
314			;			6		test3		
263			int			7		test3		
267			L			7		test3		
311			[			7		test3		
310			]			7		test3		
324			=			7		test3		
256			new			7		test3		
263			int			7		test3		
311			[			7		test3		
275			5			7		test3		    5
310			]			7		test3		
314			;			7		test3		
263			int			8		test3		
267			T			8		test3		
314			;			8		test3		
267			String			9		test3		
267			s			9		test3		
314			;			9		test3		
267			C			10		test3		
267			c			10		test3		
314			;			10		test3		
267			x			11		test3		
324			=			11		test3		
275			3			11		test3		    3
317			*			11		test3		
275			6			11		test3		    6
314			;			11		test3		
267			c			12		test3		
324			=			12		test3		
280			null			12		test3		
314			;			12		test3		
266			while			13		test3		
309			(			13		test3		
267			x			13		test3		
322			<			13		test3		
275			18			13		test3		    18
308			)			13		test3		
313			{			13		test3		
262			if			14		test3		
309			(			14		test3		
267			x			14		test3		
301			==			14		test3		
275			9			14		test3		    9
308			)			14		test3		
313			{			14		test3		
256			break			15		test3		
314			;			15		test3		
312			}			16		test3		
260			else			16		test3		
262			if			16		test3		
309			(			16		test3		
267			x			16		test3		
298			<=			16		test3		
275			5			16		test3		    5
308			)			16		test3		
313			{			16		test3		
256			break			17		test3		
314			;			17		test3		
312			}			18		test3		
260			else			18		test3		
262			if			18		test3		
309			(			18		test3		
267			x			18		test3		
300			>=			18		test3		
275			15			18		test3		    15
308			)			18		test3		
313			{			18		test3		
256			break			19		test3		
314			;			19		test3		
312			}			20		test3		
260			else			20		test3		
313			{			20		test3		
267			x			21		test3		
306			+=			21		test3		
275			1			21		test3		    1
314			;			21		test3		
312			}			22		test3		
312			}			23		test3		
261			for			24		test3		
309			(			24		test3		
267			x			24		test3		
324			=			24		test3		
275			0			24		test3		    0
314			;			24		test3		
267			x			24		test3		
322			<			24		test3		
275			3			24		test3		    3
314			;			24		test3		
267			x			24		test3		
306			+=			24		test3		
275			1			24		test3		    1
308			)			24		test3		
313			{			24		test3		
267			x			24		test3		
324			=			24		test3		
267			x			24		test3		
320			+			24		test3		
275			5			24		test3		    5
314			;			24		test3		
312			}			24		test3		
261			for			25		test3		
309			(			25		test3		
267			x			25		test3		
324			=			25		test3		
275			3			25		test3		    3
314			;			25		test3		
exit status: 0 expected 0
%option noyywrap
%option noinput
%option nounput

	int rows = 1;
%{
#include "y.tab.h"

%}
%%


"/*"([^*]|"*"+[^/*])*"*"+"/" 	{ ; }
"//".*\r?\n                  { ; }
[ \t\r\f]+                   { ; }
"\n"             				 { rows++; }
"break"                	{ return YYERRCODE; }
"double"               	{ return DOUBLE; }
"else"                 	{ return ELSE; }
"false"                	{ return BOOLLIT; }
"for"                  	{ return FOR; }
"if"                   	{ return IF; }
"int"                  	{ return INT; }
"null"                 	{ return NULLVAL; }
"public"               	{ return PUBLIC; }
"return"               	{ return RETURN; }
"static"               	{ return STATIC; }
"string"               	{ return STRING; }
"true"                 	{ return BOOLLIT; }
"bool"                 	{ return BOOL; }
"char"					{ return CHAR; }
"float"					{ return FLOAT; }
"void"                 	{ return VOID; }
"while"                	{ return WHILE; }
"class"                	{ return CLASS; }
"long"					{ return LONG;}
<<EOF>> 				{ return -1; }
"abstract" { return YYERRCODE; }
"assert" { return YYERRCODE; }
"byte" { return YYERRCODE; }
"case" { return YYERRCODE; }
"catch" { return YYERRCODE; }
"const" { return YYERRCODE; }
"continue" { return YYERRCODE; }
"default" { return YYERRCODE; }
"do" { return YYERRCODE; }
"enum" { return YYERRCODE; }
"exports" { return YYERRCODE; }
"extends" { return YYERRCODE; }
"final" { return YYERRCODE; }
"finally" { return YYERRCODE; }
"goto" { return YYERRCODE; }
"implements" { return YYERRCODE; }
"import" { return YYERRCODE; }
"instanceof" { return YYERRCODE; }
"interface" { return YYERRCODE; }
"module" { return YYERRCODE; }
"native" { return YYERRCODE; }
"new" { return YYERRCODE; }
"package" { return YYERRCODE; }
"private" { return YYERRCODE; }
"protected" { return YYERRCODE; }
"requires" { return YYERRCODE; }
"short" { return YYERRCODE; }
"strictfp" { return YYERRCODE; }
"super" { return YYERRCODE; }
"switch" { return YYERRCODE; }
"synchronized" { return YYERRCODE; }
"this" { return YYERRCODE; }
"throw" { return YYERRCODE; }
"throws" { return YYERRCODE; }
"transient" { return YYERRCODE; }
"try" { return YYERRCODE; }
"var" { return YYERRCODE; }
"volatile" { return YYERRCODE; }

"("                    { return LPAREN;}
")"                    { return RPAREN;}
"["                    { return LSQUARE;}
"]"                    { return RSQUARE;}
"{"                    { return LCURLY;}
"}"                    { return RCURLY;}
";"                    { return SEMICOLON;}
":"                    { return COLON;}
"!"                    { return LOGICNOT;}
"*"                    { return MULT;}
"/"                    { return DIVIDE;}
"%"                    { return MODULO;}
"+"                    { return ADD;}
"-"                    { return SUBTRACT;}
"<"                    { return LESSTHAN;}
"<="                   { return LESSTHANOREQUAL;}
">"                    { return GREATERTHAN;}
">="                   { return GREATERTHANOREQUAL;}
"=="                   { return ISEQUALTO;}
"!="                   { return NOTEQUALTO;}
"&&"                   { return LOGICALAND;}
"||"                   { return LOGICALOR;}
"="                    { return ASSIGNMENT; }
"+="                   { return INCREMENT; }
"-="                   { return DECREMENT; }
","                    { return COMMA; }
"."                    { return PERIOD; }

[0-9]+                 { return INTLIT; }
[0-9]*"."[0-9]*([eE][+-]?[0-9]+)? { return DOUBLELIT; }
([0-9]+)([eE][+-]?([0-9]+))  { return DOUBLELIT; }
\"[^\"]*\"     { return STRINGLIT; }
[A-Za-z0-9]+           { return IDENTIFIER; }
.              { printf("unrecognized character"); }
%%
/*
* @filename HW2.c
* @author Marisa Loraas
* @Date 2/8/22
* @breif Functions for hw2
*/
#include<stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h"

//function to check file extension name
char *filename(char *fname, int flength){
	if(strrchr(fname, '.') == NULL)
		strcat(fname, ".java");
	else if (strcmp(strrchr(fname, '.'), ".java") == 0)
		fname[flength] = '\0';
	else
    return "ERROR";
	return fname;
}

//frees tokenlist
void freelist(struct tokenlist *list) {
	struct tokenlist *temp;
	struct tokenlist *nextlist = list->next;
	while(nextlist != NULL) {
		//printf("freeing %s\n", nextlist->t->filename);
        temp = nextlist->next;
        free(nextlist->t->text);
        free(nextlist->t->filename);
        if(nextlist->t->category == 277)
            free(nextlist->t->sval);
        free(nextlist->t);
        free(nextlist);
        nextlist = temp;
    }
    free(list);
}

//add new token to token list
void addnewtoken(struct tokenlist *list, struct token *token) {
    struct tokenlist *temp = list;
    while(temp->next != NULL)
        temp = temp->next;
    temp->next = (struct tokenlist *)malloc(sizeof(struct tokenlist));
    temp->next->t = token;
}

//print token list
void print(struct tokenlist *list) {
    struct tokenlist *temp = list->next;
	printf("Category \t\t Text \t\t Lineno \t\t Filename\t\t Ival/Sval\t\t\n\n");
    for(temp = list->next; temp != NULL; temp = temp->next)  {
        printf("%d\t\t\t", temp->t->category);
        printf("%s\t\t\t", temp->t->text);
		printf("%d\t\t", temp->t->lineno);
        printf("%s\t\t", temp->t->filename);
        switch (temp->t->category) {
        case 275:
            printf("    %d\n", temp->t->ival);
            break;
        case 276:
            printf("    %f\n", temp->t->dval);
            break;
        case 277:
            printf("%s\n", temp->t->text);
			//printf("sendhelp\n");
			break;
        default:
            printf("\n");
			break;
        }
    }

}
/*
* @filename main.c
* @author Marisa Loraas
* @Date 2/8/22
* @breif Main function for HW2
* @bugs Does not check lexical errors
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h"
extern FILE *yyin;
extern int yylex(void);
extern int yylex_destroy(void);
extern int rows;
extern char *yytext;

int main(int argc, char *argv[]) {
    int flength = strlen(argv[1]);
    char *fname = (char *)malloc(sizeof(char)*(flength+2));
	char* temp = filename(argv[1], flength);
	struct tokenlist *list = (struct tokenlist *)malloc(sizeof(struct tokenlist));
	int i = 0;
	if(strcmp(temp, "ERROR") == 0){
		printf("ERROR: Wrong File extension included");
		return -1;
	}else
		strcpy(fname, temp);
	yyin = fopen(fname, "r");
	// yylex loop
    while((i = yylex()) != -1) {
        struct token *tok = (struct token *)malloc(sizeof(struct token));
		tok->filename = (char *)malloc(sizeof(char) * flength);
		tok->lineno = rows;
		strncpy(tok->filename, fname, flength);
        switch (i) {
        	case 275:
            	tok->ival = atoi(yytext);
				//printf("ival: %d yytext: %d\n", tok->ival, atoi(yytext));
            	break;
        	case 276:
            	tok->dval = strtod(yytext, NULL);
            	break;
        	case 277:
            	tok->sval = (char *)malloc(sizeof(char) * strlen(yytext));
            	strcpy(tok->sval, yytext);
				break;
        	}

		tok->category = i;
		tok->text = (char *)malloc(sizeof(char) * strlen(yytext));
		strcpy(tok->text, yytext);
        addnewtoken(list, tok);
    }
	print(list);
	free(fname);
	fclose(yyin);
	freelist(list);
	yylex_destroy();
	return 0;
}

